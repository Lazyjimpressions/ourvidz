#!/usr/bin/env node

/**
 * Direct Supabase Schema Fetcher
 * 
 * Fetches schema directly from Supabase using the anon key
 * and information_schema queries.
 * 
 * Usage: node scripts/fetch-schema-direct.js
 */

import { createClient } from '@supabase/supabase-js';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const SUPABASE_URL = 'https://ulmdmzhcdwfadbvfpckt.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVsbWRtemhjZHdmYWRidmZwY2t0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU3NzgxMTAsImV4cCI6MjA2MTM1NDExMH0.5PDD2tTcdJz_n6f-GbMCPDH7ocrEbKYShCPKkApnTQA';

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function fetchTableList() {
  console.log('üìä Fetching table list...');
  
  // Try to get a list of tables from known tables
  const knownTables = [
    'profiles',
    'projects', 
    'jobs',
    'workspace_assets',
    'user_library',
    'user_collections',
    'characters',
    'character_scenes',
    'conversations',
    'messages',
    'scenes',
    'api_models',
    'api_providers',
    'prompt_templates',
    'negative_prompts',
    'usage_logs',
    'user_activity_log',
    'user_roles',
    'system_config',
    'admin_development_progress',
    'compel_configs',
    'enhancement_presets',
    'model_config_history',
    'model_performance_logs',
    'model_test_results',
    'prompt_ab_tests'
  ];
  
  return knownTables;
}

async function fetchTableSchema(tableName) {
  try {
    // Fetch a single row to understand the schema
    const { data, error } = await supabase
      .from(tableName)
      .select('*')
      .limit(0); // Just get the structure, no data
    
    if (error) {
      console.warn(`  ‚ö†Ô∏è Could not fetch schema for ${tableName}: ${error.message}`);
      return null;
    }
    
    // The query returns empty but we can infer from the error or response structure
    // Let's try another approach - fetch one row
    const { data: sampleData, error: sampleError } = await supabase
      .from(tableName)
      .select('*')
      .limit(1);
    
    if (sampleError) {
      return null;
    }
    
    if (sampleData && sampleData.length > 0) {
      const columns = Object.keys(sampleData[0]).map(key => ({
        name: key,
        type: typeof sampleData[0][key],
        sampleValue: sampleData[0][key]
      }));
      return columns;
    }
    
    return [];
  } catch (err) {
    console.warn(`  ‚ö†Ô∏è Error with table ${tableName}: ${err.message}`);
    return null;
  }
}

async function fetchStorageBuckets() {
  console.log('üóÇÔ∏è Fetching storage buckets...');
  
  try {
    const { data, error } = await supabase.storage.listBuckets();
    
    if (error) {
      console.warn('Could not fetch buckets:', error.message);
      return [];
    }
    
    return data || [];
  } catch (err) {
    return [];
  }
}

async function fetchEdgeFunctions() {
  console.log('‚ö° Scanning local Edge Functions...');
  
  const functionsDir = path.join(__dirname, '..', 'supabase', 'functions');
  
  try {
    const items = await fs.readdir(functionsDir);
    const functions = [];
    
    for (const item of items) {
      if (!item.startsWith('_')) {
        const indexPath = path.join(functionsDir, item, 'index.ts');
        try {
          await fs.access(indexPath);
          functions.push(item);
        } catch {
          // No index.ts file
        }
      }
    }
    
    return functions.sort();
  } catch (error) {
    console.error('Error reading functions directory:', error);
    return [];
  }
}

function generateMarkdown(data) {
  const { tables, buckets, functions } = data;
  const timestamp = new Date().toISOString();
  
  let md = `# Supabase Schema Reference

> Last Updated: ${timestamp}
> Project ID: ulmdmzhcdwfadbvfpckt
> URL: ${SUPABASE_URL}

This file is auto-generated by \`scripts/fetch-schema-direct.js\`
Run \`npm run sync:schema:direct\` to update.

## How to Use This File

Claude Code can read this file to understand the current Supabase database structure.
To update: \`npm run sync:schema:direct\`

## Database Tables (${Object.keys(tables).length} tables)

`;

  // Add tables
  for (const [tableName, columns] of Object.entries(tables)) {
    md += `### ${tableName}\n\n`;
    
    if (columns && columns.length > 0) {
      md += `| Column | Type | Sample Value |\n`;
      md += `|--------|------|---------------|\n`;
      
      for (const col of columns) {
        let sampleValue = '-';
        if (col.sampleValue !== null && col.sampleValue !== undefined) {
          if (typeof col.sampleValue === 'object') {
            sampleValue = JSON.stringify(col.sampleValue).substring(0, 50);
          } else {
            sampleValue = String(col.sampleValue).substring(0, 50);
          }
        }
        md += `| ${col.name} | ${col.type} | ${sampleValue} |\n`;
      }
    } else {
      md += `*Schema not available*\n`;
    }
    
    md += '\n';
  }

  // Add Edge Functions
  md += `## Edge Functions (${functions.length} functions)\n\n`;
  
  for (const func of functions) {
    md += `- \`${func}\` ‚Üí ${SUPABASE_URL}/functions/v1/${func}\n`;
  }
  
  md += '\n';

  // Add Storage Buckets
  md += `## Storage Buckets (${buckets.length} buckets)\n\n`;
  md += `| Bucket | Public | ID |\n`;
  md += `|--------|--------|----|;\n`;
  
  for (const bucket of buckets) {
    md += `| ${bucket.name} | ${bucket.public ? '‚úÖ' : 'üîí'} | ${bucket.id} |\n`;
  }
  
  md += '\n';

  // Add helpful queries section
  md += `## Useful Queries for Claude Code\n\n`;
  md += `\`\`\`javascript\n`;
  md += `// Get recent jobs\n`;
  md += `const { data: jobs } = await supabase\n`;
  md += `  .from('jobs')\n`;
  md += `  .select('*')\n`;
  md += `  .order('created_at', { ascending: false })\n`;
  md += `  .limit(10);\n\n`;
  
  md += `// Get user's workspace assets\n`;
  md += `const { data: assets } = await supabase\n`;
  md += `  .from('workspace_assets')\n`;
  md += `  .select('*')\n`;
  md += `  .eq('user_id', userId)\n`;
  md += `  .order('created_at', { ascending: false });\n\n`;
  
  md += `// Get characters\n`;
  md += `const { data: characters } = await supabase\n`;
  md += `  .from('characters')\n`;
  md += `  .select('*')\n`;
  md += `  .eq('is_public', true);\n`;
  md += `\`\`\`\n`;

  return md;
}

async function main() {
  console.log('üöÄ Starting direct schema fetch...\n');
  
  try {
    const tables = await fetchTableList();
    const tableSchemas = {};
    
    console.log(`üìã Checking ${tables.length} known tables...`);
    
    for (const table of tables) {
      process.stdout.write(`  Fetching ${table}...`);
      const schema = await fetchTableSchema(table);
      if (schema) {
        tableSchemas[table] = schema;
        console.log(' ‚úÖ');
      } else {
        console.log(' ‚è≠Ô∏è');
      }
    }
    
    const buckets = await fetchStorageBuckets();
    const functions = await fetchEdgeFunctions();
    
    const markdown = generateMarkdown({
      tables: tableSchemas,
      buckets,
      functions
    });
    
    // Save to file
    const outputPath = path.join(__dirname, '..', 'docs', 'SUPABASE_SCHEMA.md');
    await fs.writeFile(outputPath, markdown, 'utf-8');
    
    console.log(`\n‚úÖ Schema exported to: docs/SUPABASE_SCHEMA.md`);
    console.log(`üìä Found ${Object.keys(tableSchemas).length} accessible tables`);
    console.log(`‚ö° Found ${functions.length} edge functions`);
    console.log(`üóÇÔ∏è Found ${buckets.length} storage buckets`);
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    process.exit(1);
  }
}

main();