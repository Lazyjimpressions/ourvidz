#!/usr/bin/env node

/**
 * Safe Supabase Schema Sync
 * 
 * This script calls an Edge Function to get schema information,
 * avoiding the need to expose service keys locally.
 * 
 * Usage: node scripts/sync-schema-safe.js
 */

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Use the public anon key (safe to expose)
const SUPABASE_URL = 'https://ulmdmzhcdwfadbvfpckt.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVsbWRtemhjZHdmYWRidmZwY2t0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU3NzgxMTAsImV4cCI6MjA2MTM1NDExMH0.5PDD2tTcdJz_n6f-GbMCPDH7ocrEbKYShCPKkApnTQA';

async function fetchSchemaFromEdgeFunction() {
  console.log('üìä Fetching schema from Edge Function...');
  
  try {
    const response = await fetch(`${SUPABASE_URL}/functions/v1/get-schema-info`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        'apikey': SUPABASE_ANON_KEY
      },
      body: JSON.stringify({ action: 'schema' })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching schema:', error);
    return null;
  }
}

async function fetchLocalEdgeFunctions() {
  console.log('‚ö° Scanning local Edge Functions...');
  
  const functionsDir = path.join(__dirname, '..', 'supabase', 'functions');
  
  try {
    const functions = await fs.readdir(functionsDir);
    const functionDetails = [];
    
    for (const func of functions) {
      if (func.startsWith('_')) continue; // Skip shared directories
      
      const funcPath = path.join(functionsDir, func, 'index.ts');
      try {
        await fs.access(funcPath);
        functionDetails.push(func);
      } catch {
        // Function directory exists but no index.ts
      }
    }
    
    return functionDetails;
  } catch (error) {
    console.error('Error reading edge functions:', error);
    return [];
  }
}

function generateMarkdown(schemaData) {
  const { tables, buckets, edgeFunctions, timestamp } = schemaData;
  
  let markdown = `# Supabase Schema Reference

> Last Updated: ${timestamp}
> Project ID: ulmdmzhcdwfadbvfpckt
> URL: ${SUPABASE_URL}

This file is auto-generated by \`scripts/sync-schema-safe.js\`
Run \`npm run sync:schema\` to update.

## How Claude Code Can Query Supabase

\`\`\`javascript
// Run this script to update schema
npm run sync:schema

// The schema will be saved in this file for reference
// Claude Code can read this file to understand the current database structure
\`\`\`

## Database Tables

`;

  // Add tables
  if (tables) {
    const tableNames = Object.keys(tables).sort();
    
    markdown += `Total Tables: ${tableNames.length}\n\n`;
    
    for (const tableName of tableNames) {
      const columns = tables[tableName];
      markdown += `### ${tableName}\n\n`;
      markdown += `| Column | Type | Nullable | Default |\n`;
      markdown += `|--------|------|----------|----------|\n`;
      
      if (columns && Array.isArray(columns)) {
        for (const column of columns) {
          markdown += `| ${column.column_name} | ${column.data_type} | ${column.is_nullable} | ${column.column_default || '-'} |\n`;
        }
      }
      markdown += '\n';
    }
  }

  // Add edge functions
  markdown += `## Edge Functions\n\n`;
  
  if (edgeFunctions && Array.isArray(edgeFunctions)) {
    for (const func of edgeFunctions) {
      markdown += `- \`${func}\` - /functions/v1/${func}\n`;
    }
  }
  markdown += '\n';

  // Add storage buckets
  markdown += `## Storage Buckets\n\n`;
  
  if (buckets && Array.isArray(buckets)) {
    for (const bucket of buckets) {
      markdown += `- \`${bucket.name}\` (${bucket.public ? 'public' : 'private'})\n`;
    }
  }
  markdown += '\n';

  // Add quick reference section
  markdown += `## Quick Reference for AI\n\n`;
  markdown += `### Main Tables\n\n`;
  markdown += `- **profiles** - User profiles and settings\n`;
  markdown += `- **projects** - User projects (media generation)\n`;
  markdown += `- **jobs** - Generation job queue and status\n`;
  markdown += `- **workspace_assets** - Temporary workspace files\n`;
  markdown += `- **user_library** - Saved user assets\n`;
  markdown += `- **characters** - Roleplay characters\n`;
  markdown += `- **conversations** - Chat conversations\n`;
  markdown += `- **messages** - Conversation messages\n`;
  markdown += `- **api_models** - Available AI models\n`;
  markdown += `- **api_providers** - API provider configurations\n`;

  return markdown;
}

async function main() {
  console.log('üöÄ Starting safe schema sync...\n');
  
  try {
    // Fetch schema from Edge Function
    const schemaData = await fetchSchemaFromEdgeFunction();
    
    if (!schemaData) {
      console.error('‚ùå Failed to fetch schema from Edge Function');
      console.log('Make sure the get-schema-info Edge Function is deployed:');
      console.log('  supabase functions deploy get-schema-info');
      process.exit(1);
    }
    
    // Also get local Edge Functions
    const localFunctions = await fetchLocalEdgeFunctions();
    if (localFunctions.length > 0) {
      schemaData.edgeFunctions = localFunctions;
    }
    
    // Generate markdown
    const markdown = generateMarkdown(schemaData);
    
    // Write to file
    const outputPath = path.join(__dirname, '..', 'docs', 'SUPABASE_SCHEMA.md');
    await fs.mkdir(path.dirname(outputPath), { recursive: true });
    await fs.writeFile(outputPath, markdown, 'utf-8');
    
    console.log(`‚úÖ Schema exported to: docs/SUPABASE_SCHEMA.md`);
    
    if (schemaData.tables) {
      console.log(`üìä Found ${Object.keys(schemaData.tables).length} tables`);
    }
    if (schemaData.edgeFunctions) {
      console.log(`‚ö° Found ${schemaData.edgeFunctions.length} edge functions`);
    }
    if (schemaData.buckets) {
      console.log(`üóÇÔ∏è Found ${schemaData.buckets.length} storage buckets`);
    }
    
  } catch (error) {
    console.error('‚ùå Error syncing schema:', error);
    process.exit(1);
  }
}

main();